from lab1.main.BookmarkManager import BookmarkManager
from lab1.main.CommandHandler import CommandHandler
import unittest
import os

test_content = """# 课程
[elearning](https://elearning.fudan.edu.cn/courses)
# 参考资料
[Markdown Guide](https://www.markdownguide.org)
## 函数式
[JFP](https://www.cambridge.org/core/journals/journal-of-functional-programming)
## 面向对象
# 待阅读
[Category Theory](http://www.appliedcategorytheory.org/what-is-applied-category-theory/)
"""


class SaveOpenTest(unittest.TestCase):
    def __init__(self, methodName):
        super(SaveOpenTest, self).__init__(methodName)
        self.bookmark_manager = BookmarkManager()
        self.command_handler = CommandHandler(self.bookmark_manager)
        self.command_handler.execute('add-title "课程"')
        self.command_handler.execute('add-title "参考资料"')
        self.command_handler.execute('add-title "函数式" at "参考资料"')
        self.command_handler.execute('add-title "面向对象" at "参考资料"')
        self.command_handler.execute('add-title "待阅读"')
        self.command_handler.execute('add-bookmark "elearning"@"https://elearning.fudan.edu.cn/courses" at "课程"')
        self.command_handler.execute('add-bookmark "Markdown Guide"@"https://www.markdownguide.org" at "参考资料"')
        self.command_handler.execute(
            'add-bookmark "JFP"@"https://www.cambridge.org/core/journals/journal-of-functional-programming" at "函数式"')
        self.command_handler.execute(
            'add-bookmark "Category Theory"@"http://www.appliedcategorytheory.org/what-is-applied-category-theory/" at "待阅读"')
        self.file_path = "../bookmarks/test.bmk"

    def test_save_file(self):
        self.command_handler.execute(f'save "{self.file_path}"')
        with open(self.file_path, "r", encoding='utf-8') as file:
            opened_content = file.read()
        self.assertEqual(opened_content, test_content)
        os.remove(self.file_path)

    def test_open_file(self):
        self.command_handler.execute(f'save "{self.file_path}"')
        test_bookmark_manager = BookmarkManager()
        test_command_handler = CommandHandler(test_bookmark_manager)
        test_command_handler.execute(f'save')
        test_command_handler.execute(f'open "{self.file_path}"')
        self.assertTrue(self.bookmark_manager.trees_equal(test_bookmark_manager))
        os.remove(self.file_path)


if __name__ == "__main__":
    unittest.main()
